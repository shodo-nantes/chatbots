const attendance = require('./attendance');

const ATTENDANCE_COMMAND = '@attendance-chatbot';
describe('Attendance', () => {
    it('when the request method is GET then should return a greeting message', () => {
        const request = { method: 'GET' };
        const response = { send: jest.fn() };

        attendance(request, response);

        expect(response.send).toHaveBeenCalledWith('Hello! This function is meant to be used in a Google Chat Space.');
    });

    describe('compute', () => {
        let request;
        let response;

        beforeEach(() => {
            request = {
                method: 'POST',
                body: {
                    message: {
                        text: `${ATTENDANCE_COMMAND} `,
                        sender: {
                            displayName: 'John Doe',
                        },
                    },
                },
            };
            response = { send: jest.fn() };
        });

        it('when message is empty then should return ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå', () => {
            attendance(request, response);

            expect(response.send).toHaveBeenCalledWith({
                text: 'John Doe : ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå',
            });
        });

        it('when message is xxxxx then should return ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå', () => {
            request.body.message.text += 'xxxxx';
            attendance(request, response);

            expect(response.send).toHaveBeenCalledWith({
                text: 'John Doe : ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå',
            });
        });

        it.each(['o', 'O', '0', 'v', 'V', '‚úÖ'])(
            'display ‚úÖ  for command indicating that user is present',
            (command) => {
                request.body.message.text += `xx${command}xx`;
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚ùå | ‚ùå | ‚úÖ | ‚ùå | ‚ùå',
                });
            },
        );

        it.each([...'azetyuip^$qsdfghjklm√π*wxbn,;:!123456789'])(
            'display ‚ùå  by default for any unknown command "%s"',
            (command) => {
                request.body.message.text += `oo${command}oo`;
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚úÖ | ‚úÖ | ‚ùå | ‚úÖ | ‚úÖ',
                });
            },
        );

        describe('display single command at ', () => {
            it('first position', () => {
                request.body.message.text += 'oxxxx';
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚úÖ | ‚ùå | ‚ùå | ‚ùå | ‚ùå',
                });
            });

            it('second position', () => {
                request.body.message.text += 'xoxxx';
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚ùå | ‚úÖ | ‚ùå | ‚ùå | ‚ùå',
                });
            });

            it('third position', () => {
                request.body.message.text += 'xxoxx';
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚ùå | ‚ùå | ‚úÖ | ‚ùå | ‚ùå',
                });
            });

            it('fourth position', () => {
                request.body.message.text += 'xxxox';
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚ùå | ‚ùå | ‚ùå | ‚úÖ | ‚ùå',
                });
            });
            it('fifth position', () => {
                request.body.message.text += 'xxxxo';
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚úÖ',
                });
            });
        });

        describe('display additional ‚ùå  for partial command', () => {
            it.each([...'ov‚úÖüè†‚ùìüíº'])('when missing four last characters for command %s', (command) => {
                request.body.message.text += command;
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: expect.stringContaining(' | ‚ùå | ‚ùå | ‚ùå | ‚ùå'),
                });
            });

            it('when missing three last characters', () => {
                request.body.message.text += 'oo';
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚úÖ | ‚úÖ | ‚ùå | ‚ùå | ‚ùå',
                });
            });

            it('when missing two last characters', () => {
                request.body.message.text += 'ooo';
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå | ‚ùå',
                });
            });

            it('when missing the last character', () => {
                request.body.message.text += 'oooo';
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚ùå',
                });
            });
        });

        it.each(['x', 'o', '?', '-whatever'])('never display more than five attendance days', (extraText) => {
            request.body.message.text += `xoxox${extraText}`;
            attendance(request, response);

            expect(response.send).toHaveBeenCalledWith({
                text: 'John Doe : ‚ùå | ‚úÖ | ‚ùå | ‚úÖ | ‚ùå',
            });
        });

        it.each(['?', '‚ùì'])(
            `display ‚ùì  for command indicating that user doesn't know if present or not`,
            (command) => {
                request.body.message.text += `xx${command}xx`;
                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: 'John Doe : ‚ùå | ‚ùå | ‚ùì | ‚ùå | ‚ùå',
                });
            },
        );

        it.each(['r', 'R', 'üè†'])(`display üè† for command %s indicating that user works from home`, (command) => {
            request.body.message.text += `xx${command}xx`;
            attendance(request, response);

            expect(response.send).toHaveBeenCalledWith({
                text: 'John Doe : ‚ùå | ‚ùå | üè† | ‚ùå | ‚ùå',
            });
        });

        it.each(['c', 'C', 'üíº'])(`display üíº for command %s indicating that user works from home`, (command) => {
            request.body.message.text += `xx${command}xx`;
            attendance(request, response);

            expect(response.send).toHaveBeenCalledWith({
                text: 'John Doe : ‚ùå | ‚ùå | üíº | ‚ùå | ‚ùå',
            });
        });

        it.each(['@attendance-chatbot', '/attendance'])('triggers command for %s command prefix', (commandPrefix) => {
            request.body.message.text = `${commandPrefix} xox?x`;
            attendance(request, response);

            expect(response.send).toHaveBeenCalledWith({
                text: 'John Doe : ‚ùå | ‚úÖ | ‚ùå | ‚ùì | ‚ùå',
            });
        });

        it('display proper message when command and arguments are separated by multiple white spaces', () => {
            request.body.message.text += `    oxoxo`;
            attendance(request, response);

            expect(response.send).toHaveBeenCalledWith({
                text: 'John Doe : ‚úÖ | ‚ùå | ‚úÖ | ‚ùå | ‚úÖ',
            });
        });

        it('display error message when command is not known', () => {
            request.body.message.text = 'toto oxoxo';
            attendance(request, response);

            expect(response.send).toHaveBeenCalledWith({
                text: 'Unknown command "toto"',
            });
        });
    });

    describe('help', () => {
        let request;
        let response;

        beforeEach(() => {
            request = {
                method: 'POST',
                body: {
                    message: {
                        text: `${ATTENDANCE_COMMAND} `,
                        sender: {
                            displayName: 'John Doe',
                        },
                    },
                },
            };
            response = { send: jest.fn() };
        });

        it('print whole help message', () => {
            request.body.message.text = `${ATTENDANCE_COMMAND} help`;

            attendance(request, response);

            expect(response.send).toHaveBeenCalledWith({
                text: `Usage: @attendance-chatbot [-h|--help|help] jours_de_la_semaine
Ce bot retranscrit les "jours de la semaine" renseign√©s par une personne dans le canal, et les affiche dans un format visuellement plus sympa (avec des emojis).L'objectif initial √©tant de pouvoir d√©nombrer les personnes pr√©sentes dans les locaux de Shodo pour s'organiser en cons√©quence.Actuellement les informations donn√©es au bot ne sont ni stockage, ni synth√©tis√©es.

Arguments de la commande:

    [-h|--help|help] : argument optionnel permettant d'afficher le pr√©sent texte.

    jours_de_la_semaine : argument de 5 caract√®res √† donner au bot, permettant de d√©crire sa semaine aux autres Shodoers et Shodoeuses.
    Liste des symboles propos√©s par le bot : 
    - ‚úÖ Pr√©sent‚Ä¢e (dans les locaux).
        Symboles : "o", "O", "0", "v", "V" ou "‚úÖ" 
    - ‚ùå Absent‚Ä¢e (des locaux et ne pr√©sage pas d'un autre type d'absence)
        Symboles : "x" et "par d√©faut" tout symbole non support√© par ailleurs
    - ‚ùì Je ne sais pas
        Symboles : "?", "‚ùì"
    - üè† En remote (travaille depuis chez soi).
        Symboles : "r", "R", "üè†"
    - üíº En client√®le (pr√©sentiel chez le client).
        Symboles : "c", "C", "üíº"
    - üèùÔ∏è Holidays (en √©t√©) (vacances, mais le "v" est d√©j√† pris).
        Symboles : "h", "H", "üèùÔ∏è"
    - üéø Holidays (en hiver) (vacances, mais le "v" est d√©j√† pris).
        Symboles : "h", "H", "üéø"
`,
            });
        });

        it.each(['help', '-h', '--help'])(
            'display help message when contains attendance and help flag %s',
            (helpFlag) => {
                request.body.message.text = `${ATTENDANCE_COMMAND} oxoxo ${helpFlag}`;

                attendance(request, response);

                expect(response.send).toHaveBeenCalledWith({
                    text: expect.stringContaining('Usage: @attendance-chatbot [-h|--help|help] jours_de_la_semaine'),
                });
            },
        );
    });
});
